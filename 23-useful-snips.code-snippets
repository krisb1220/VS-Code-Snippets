//Add comment block in Javascript  ------ !xcb
//Add comment block in Javascript ------- !xhtmlcb
//Bcrypt hash + return hash -------- !xhash
//Compare bcrypt hash ----- !xhashcompare
//Add a route with post|get and res.send|res.json|res.render ------- !xroute
//Add a  post route with post|get and res.send|res.json|res.render -------- !xpost
//Add a post with post|get and res.send|res.json|res.render ------ !xget
//Axios post ----- !xaxpost
//Axios get ------- !xaxget
//Axios -------- !xaxios with get|post|put
//Require a module --- !xreqmod
//Require an internal module --- !xreqint
//Export a function -- exports.function = function(){} ---- !xexpfun
//Export a global variable -- exports.var = var ------ !xexpvar
//Export internal module.data -- exports.var = require("/data").data -----!xexpmod
//Mongoose.connect  ------ !xmongooseconnect
//App.use() -------- !xuse
//Init session -- App.use(session) with boilerplate options  ------- !xsession
//Init passport  -------- !xpassport
//Init session and passport in correct order -------- !xsessionpassport
//Start express app -- const app = express() ------- !xapp


{
	"Add comment block in Javascript": {
		"prefix": "!xcb",
		"description": "JS/CSS Comment Block",
		"body": "/*======================================\r# ${1:My Comment} #\r======================================*/"
	},

	"Add comment block in HTML": {
		"prefix": "!xhtmlcb",
		"description": "HTML comment block",
		"body": "<!--\r======================================\r# ${1:My Comment} #\r======================================\r-->"
	},

	"Hash": {
		"prefix": "!xhash",
		"description": "Bcrypt hash",
		"body": "bcrypt.hashSync(${1:password}, ${2:saltRounds}, (err, hash) => {\r\tif (err) console.error(err)\r\telse return hash;\r})"
	},

	"Hash Compare": {
		"prefix": "!xhashcomp",
		"description": "Bcrypt hash compare",
		"body": "bcrypt.compareSync(${1:plain}, ${2:hashed})"
	},

	"Add a route": {
		"prefix": "!xroute",
		"description": "app.route()",
		"body": "app.route('/${1:url}').${2|post,get|}((req, res)=>{\r\r\t${3|res.send(data),res.json(data), res.render(page)|}\r\r})"
	},

	"Add a get() route": {
		"prefix": "!xget",
		"description": "app.route().get()",
		"body": "app.route('/${1:url}').get((req, res)=>{\r\r\t${3|res.send(data),res.json(data), res.render(page)|}\r\r})"
	},

	"Add a post() route": {
		"prefix": "!xpost",
		"description": "app.route().post()",
		"body": "app.route('/${1:url}').post((req, res)=>{\r\r\t${3|res.send(data),res.json(data), res.render(page)|}\r\r})"
	},

	"Axios post": {
		"prefix": "!xaxpost",
		"description": "Post data with Axios",
		"body": "axios({\rmethod: 'post',\r\turl: `${1:url}`,\r\tdata: ${2:data},\r\tredirect: '${3:redirectOption}'\r\t})"
	},

	"Axios get": {
		"prefix": "!xaxget",
		"description": "Get data with Axios",
		"body": "axios({\rmethod: 'get',\r\turl: `${1:url}`,\r\tdata: ${2:data},\r\tredirect: '${3:redirectOption}'\r\t})"
	},

	"Axios ": {
		"prefix": "!xaxios",
		"description": "Request with Axios",
		"body": "axios({\rmethod: '${1|get, post, put|}',\r\turl: `${2:url}`,\r\tdata: ${3:data},\r\tredirect: '${4:redirectOption}'\r\t})"
	},

	"Require": {
		"prefix": "!xreqint",
		"description": "Require internal module",
		"body": "const ${1:varName} = require('./${2:directory}')"
	},

	"Require Module": {
		"prefix": "!xreqmod",
		"description": "Require NPM module",
		"body": "const ${1:varName} = require('${2:module}')"
	},

	"Export function": {
		"prefix": "!xexpfun",
		"description": "Export a function",
		"body": "exports.${1:varName}  = function(${2:params}) {\r\t ${3:logic}\r}"
	},

	"Export Variable": {
		"prefix": "!xexpvar",
		"description": "Export a variable",
		"body": "exports.${1:varName}  = ${2:varName2}"
	},

	"Export internal module data": {
		"prefix": "!xexpmod",
		"description": "export require().data",
		"body": "exports.${1:varName}  = require('./${2:params}').data;"
	},

	"Mongoose connect": {
		"prefix": "!xmongoconnect",
		"description": "mongoose.connect()",
		"body": "mongoose.connect(process.env.DATABASE, {useUnifiedTopology:true, useNewUrlParser:true}, (err, db)=>{\r\r\t\tif(err) console.error(err); \r\t\telse{ \r\t\t\t${1:logic}\r\t\t}\r});"
	},

	"Use a middleware": {
		"prefix": "!xuse",
		"description": "app.use()",
		"body": "app.use(${1:logic})"
	},

	"Use session": {
		"prefix": "!xsession",
		"description": "app.use(session)",
		"body": "app.use(session({\r\tsecret: process.env.SECRET,\r\tsaveUninitialized: true,\r\tresave:true\r\t}))"
	},

	"Passport Init": {
		"prefix": "!xpassport",
		"description": "init passport",
		"body": "app.use(session({\r\tsecret: process.env.SECRET,\r\tsaveUninitialized: true,\r\tresave:true\r\t}))\r\rapp.use(passport.initialize());\rapp.use(passport.session());"
	},

	"Passport Session Init": {
		"prefix": "!xsessionpassport",
		"description": "init passport+session",
		"body": "app.use(session({\r\tsecret: process.env.SECRET,\r\tsaveUninitialized: true,\r\tresave:true\r\t}))\r\rapp.use(passport.initialize());\rapp.use(passport.session());"
	},
	
	"Start express app": {
		"prefix": "!xapp",
		"description": "app=express",
		"body": "const app = express()"
	},

	"Add event listener": {
		"prefix": "!xlistener",
		"description": "addEventListener",
		"body": "document.querySelector('${1:selector}').addEventListener('${2:listner}',(event)=>{\r\r\t${3:data}\r\r})"
	},

	"Add multiple event listener": {
		"prefix": "!xlistenerall",
		"description": "addEventListener",
		"body": "document.querySelectorAll('${1:query}').forEach((element)=>{\r\r\telement.addEventListener('${2:listener}', (event)=>{\r\t\t${3:doSomething()}\r\t})\r\r})"
	},
	
	



	"Express Boiler Plate":{
		"prefix": "!xpress",
		"description": "Express boilerplate",
		"body": "const express = require('express');\rconst session = require('express-session');\rconst bodyParser = require('body-parser');\rconst passport = require('passport');\rconst cookieParser = require('cookie-parser');\rconst mongoose = require('mongoose');\rconst dotenv = require('dotenv');\rconst routes = require('./routes/routes');\rconst auth = require('./auth/auth');\rconst Schemas = ('./database/schemas/schemas');\rconst mongooseOptions = {useUnifiedTopology:true, useNewUrlParser:true};\rconst app = express();\r\r\rdotenv.config();\rapp.use(express.static(__dirname+'/public'));\rapp.use(cookieParser());\rapp.use(bodyParser.json());\rapp.use(express.json())\rapp.use(bodyParser.urlencoded({ extended: true }));\rapp.set('view engine', 'pug')\r\rapp.use(session({\r\tsecret: process.env.SECRET,\r\tsaveUninitialized: true,\r\tresave:true\r}))\r\rapp.use(passport.initialize());\rapp.use(passport.session());\r\rmongoose.connect(process.env.DATABASE, mongooseOptions, (err, db)=>{\r\t\tif(err) console.error(err);  \r\t\telse { \r\t\t\tconsole.log('Connected to remote database'); \r\t\t\tauth(app, db); \r\t\t\troutes(app, db); \r}\r});\r\r// console.log(process.env);\r\rapp.listen(process.env.PORT||3000,()=>{\r\tconsole.log('App is listening on port ' + process.env.PORT);\r})\r" 
	}

}
